/*
You have three stacks of cylinders where each cylinder has the same diameter, but they may vary in height. You can change the height of a stack by removing and discarding its topmost cylinder any number of times.

Find the maximum possible height of the stacks such that all of the stacks are exactly the same height. This means you must remove zero or more cylinders from the top of zero or more of the three stacks until they are all the same height, then return the height.

Example




There are  and  cylinders in the three stacks, with their heights in the three arrays. Remove the top 2 cylinders from  (heights = [1, 2]) and from  (heights = [1, 1]) so that the three stacks all are 2 units tall. Return  as the answer.

Note: An empty stack is still a stack.

Function Description

Complete the equalStacks function in the editor below.

equalStacks has the following parameters:

int h1[n1]: the first array of heights
int h2[n2]: the second array of heights
int h3[n3]: the third array of heights
Returns

int: the height of the stacks when they are equalized
Input Format

The first line contains three space-separated integers, , , and , the numbers of cylinders in stacks , , and . The subsequent lines describe the respective heights of each cylinder in a stack from top to bottom:

The second line contains  space-separated integers, the cylinder heights in stack . The first element is the top cylinder of the stack.
The third line contains  space-separated integers, the cylinder heights in stack . The first element is the top cylinder of the stack.
The fourth line contains  space-separated integers, the cylinder heights in stack . The first element is the top cylinder of the stack.
Constraints

Sample Input

STDIN       Function
-----       --------
5 3 4       h1[] size n1 = 5, h2[] size n2 = 3, h3[] size n3 = 4  
3 2 1 1 1   h1 = [3, 2, 1, 1, 1]
4 3 2       h2 = [4, 3, 2]
1 1 4 1     h3 = [1, 1, 4, 1]
Sample Output

5
Explanation

Initially, the stacks look like this:

initial stacks

To equalize thier heights, remove the first cylinder from stacks  and , and then remove the top two cylinders from stack  (shown below).

modified stacks

The stack heights are reduced as follows:

All three stacks now have , the value to return.
*/
//Problem: https://www.hackerrank.com/challenges/equal-stacks
//Java 8
/*
Initial Thoughts: If we put the cylinders into stacks(queues) and keep track
                  of their heights then we can continue removing from
                  stacks until we reach the height of the smallest 
                  stack. The smallest stack will continue to change as
                  we go. The reason we aim for them all to be the height
                  of the smallest stack, is because the only action we 
                  can perform is deleltion, therefore we can't grow the
                  smallest to match the others, but rather have to shrink
                  to meet the smallest
                  
Time Complexity: O(n) //We must look at every element in the worst case //n = n1+n2+n3
Space Complexity: O(n) //After initialization our stacks take up n space //n = n1+n2+n3
*/
import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n1 = in.nextInt(); //Number of cylinders in first stack
        int n2 = in.nextInt(); //Number of cylinders in second stack
        int n3 = in.nextInt(); //Number of cylinders in third stack
        Queue<Integer> s1 = new LinkedList<Integer>(); //First stack of cylinders
        Queue<Integer> s2 = new LinkedList<Integer>(); //Second stack of cylinders
        Queue<Integer> s3 = new LinkedList<Integer>(); //Third stack of cylinders
        int h1 = 0; //Height of the first stack
        int h2 = 0; //Height of the second stack
        int h3 = 0; //Height of the third stack
        
        int minStack; //The stack with the smallest height
        
        //Initialize the stacks and their heights
        for(int i = 0; i < n1; i++){
            int cylinder = in.nextInt();
            s1.add(cylinder);
            h1 += cylinder;
        }
        
        for(int i = 0; i < n2; i++){
            int cylinder = in.nextInt();
            s2.add(cylinder);
            h2 += cylinder;
        }
        
        for(int i = 0; i < n3; i++){
            int cylinder = in.nextInt();
            s3.add(cylinder);
            h3 += cylinder;
        }
        minStack = Math.min(h1,Math.min(h2,h3));//Initialize minStack with the minimum height
        
        while(h1 != h2 || h1 != h3)//Heights are not all equal
        {
            //Remove cylinders from stack 1 until your height is <= the smallest
            while(h1 > minStack)
            {
                h1 -= s1.remove();
            }
            minStack = Math.min(h1,Math.min(h2,h3)); //Recalculate min
            
            //Remove cylinders from stack 2 until your height is <= the smallest
            while(h2 > minStack)
            {
                h2 -= s2.remove();
            }
            minStack = Math.min(h1,Math.min(h2,h3)); //Recalculate min
            
            //Remove cylinders from stack 3 until your height is <= the smallest
            while(h3 > minStack)
            {
                h3 -= s3.remove();
            }
            minStack = Math.min(h1,Math.min(h2,h3)); //Recalculate min
        }
        System.out.println(minStack);//All stacks are equal so minStack represents their height
    }
}